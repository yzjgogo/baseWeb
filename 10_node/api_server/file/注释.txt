

1:路由处理函数抽取：
搜'路由处理函数抽取步骤'

2：数据库连接抽取
搜'数据库连接抽取步骤'


3：对密码进行加密处理
使用 bcryptjs 对用户密码进行加密，优点：
加密之后的密码，无法被逆向破解
同一明文密码多次加密，得到的加密结果各不相同，保证了安全性

搜'对密码进行加密处理步骤'
对密码进行加密处理步骤1：
运行如下命令，安装指定版本的 bcryptjs
npm i bcryptjs@2.4.3


4:全局中间件使用场景：
在处理函数中，需要多次调用 res.send() 向客户端响应 处理失败 的结果，为了简化代码，可以手动封装一个 res.cc() 函数;
即定义一个全局中间件统一处理所有请求报错的情况
搜索'全局中间件使用场景步骤'

5：表单数据验证，例如登录注册等提交的字段验证
在实际开发中，前后端都需要对表单的数据进行合法性的验证，而且，后端做为数据合法性验证的最后
一个关口，在拦截非法数据方面，起到了至关重要的作用。
单纯的使用 if...else... 的形式对数据合法性进行验证，效率低下、出错率高、维护性差。因此，
推荐使用第三方数据验证模块，来降低出错率、提高验证的效率与可维护性，让后端程序员把更多的精
力放在核心业务逻辑的处理上。

在https://www.npmjs.com/中直接搜@hapi/joi搜不到准确用到的这个，搜@escook/express-joi能搜到，且里面也有@hapi/joi

@escook/express-joi官网：
https://www.npmjs.com/package/@escook/express-joi
https://github.com/liulongbin1314/express-joi
官网里就涉及到@hapi/joi了

搜索'使用第三方中间件实现表单数据验证步骤'

使用第三方中间件实现表单数据验证步骤1： 安装 @hapi/joi 包，为表单中携带的每个数据项，定义验证规则：
npm install @hapi/joi@17.1.0
使用第三方中间件实现表单数据验证步骤2：安装 @escook/express-joi 中间件，来实现自动对表单数据进行验证的功能：
npm i @escook/express-joi